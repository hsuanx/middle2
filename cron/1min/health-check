#!/usr/bin/env php
<?php
define('LOCK_FILE', '/tmp/hisoku-health-check');
$fp = fopen(LOCK_FILE, 'w+');
if (!flock($fp, LOCK_EX | LOCK_NB)) {
    throw new Exception(LOCK_FILE . ' is locking');
}

ftruncate($fp, 0);      // truncate file
fwrite($fp, getmypid());
fflush($fp);            // flush output before releasing the lock

include(__DIR__ . '/../../webdata/init.inc.php');

if (getenv('TRY_MODE')) {
    exit;
}

# check loadbalancer
foreach (Hisoku::getLoadBalancers() as $host) {
    $curl = curl_init('http://' . $host . '/');
    curl_setopt($curl, CURLOPT_HTTPHEADER, array('Host: healthcheck'));
    curl_setopt($curl, CURLOPT_TIMEOUT, 10);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    $ret = curl_exec($curl);
    if (!preg_match("#OK#", $ret)) {
        Hisoku::alert("LoadBalancer error", "LoadBalancer IP: {$host}: Return: {$ret}");
        continue;
    }
    $info = curl_getinfo($curl);
    if ($info['total_time'] > 1) {
        Hisoku::alert("LoadBalancer warning", "LoadBalancer IP: {$host}\nhealth check time: " . json_encode($info, JSON_PRETTY_PRINT));
    }
}

# check search
foreach (Hisoku::getSearchServers() as $search_server) {
    $curl = curl_init('http://' . $search_server . ':9200/_stats');
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_TIMEOUT, 10);
    $content = curl_exec($curl);
    $info = curl_getinfo($curl);
    if ($info['http_code'] != 200) {
        Hisoku::alert("Search error", "Search IP: {$search_server}\n Return: {$info['http_code']}\n");
        continue;
    }

    if (!$json = json_decode($content)) {
        Hisoku::alert("Search error", "Search IP: {$search_server}\n return is not valid json\n{$content}");
        continue;
    }

    if (!$json->ok) {
        Hisoku::alert("Search error", "Search IP: {$search_server}\n json is not ok\n" . print_r($json, true));
        continue;
    }
}

flock($fp, LOCK_UN);    // release the lock
fclose($fp);
unlink(LOCK_FILE);
